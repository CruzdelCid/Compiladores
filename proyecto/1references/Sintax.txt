INICIO ::= PROGRAM:p

PROGRAM ::= Class:c Program KeyOpenClose
        | Class Program LeftKey PROGRAM_FIELD_DECL:pfd

PROGRAM_FIELD_DECL ::= FIELD_DECL:fd PROGRAM_FIELD_DECL:pfd
        | METHOD_DECL:md PROGRAM_METHOD_DECL:pmd
        | RightKey

PROGRAM_METHOD_DECL ::= METHOD_DECL:md PROGRAM_METHOD_DECL:pmd
        | RightKey

FIELD_DECL ::= TYPE:tp DECL:d

DECL ::= Id:i FIELD_CLOSE:fc 
        | Id:i LeftBracket INT_LITERAL:il RightBracket FIELD_CLOSE:fc

FIELD_CLOSE ::= Comma DECL:d
        | SemiColom 

METHOD_DECL ::= TYPE:t Id:i LeftParent M_DECL:md 
        | Void Id:i LeftParent M_DECL:md
        | TYPE:t Id:i ParentOpenClose BLOCK:b
        | Void Id:i ParentOpenClose:ppp BLOCK:b

M_DECL ::= TYPE:t Id:i RightParent BLOCK:b
        | TYPE:t Id:i Comma M_DECL:md 

BLOCK ::= KeyOpenClose
        | LeftKey BLOCK_VAR_DECL:bvd 

BLOCK_VAR_DECL ::= VAR_DECL:vd BLOCK_VAR_DECL:bvd
        | STATEMENT:s BLOCK_STATEMENT:bs
        | RightKey

BLOCK_STATEMENT ::= STATEMENT:s BLOCK_STATEMENT:bs
        | RightKey

VAR_DECL ::= TYPE:t VAR_ID:vi

VAR_ID ::= Id:i Comma VAR_ID:vi
        | Id:i SemiColom

TYPE ::= Int
        | Boolean 

STATEMENT ::= LOCATION:l ASSIGN_OP:ao EXPR:e SemiColom
        | METHOD_CALL:mc SemiColom
        | If LeftParent EXPR:e RightParent BLOCK:b ELSE_BLOCK:eb 
        | For Id:i Asign EXPR:e1 Comma EXPR:e2 BLOCK:b
        | Return RETURN_EXPR:re 
        | Break SemiColom
        | Continue SemiColom
        | BLOCK:b

ELSE_BLOCK ::= Else BLOCK:b

RETURN_EXPR ::= EXPR:e SemiColom
        | SemiColom

ASSIGN_OP ::= Asign
        | AsignAdd
        | AsignSubs

METHOD_CALL ::= METHOD_NAME:mn ParentOpenClose
        | METHOD_NAME:mn LeftParent METHOD_CALL_EXPR:mce
        | Callout LeftParent StringLiteral:sl RightParent
        | Callout LeftParent StringLiteral:sl METHOD_CALL_CALLOUT:mcc

METHOD_CALL_EXPR ::= EXPR:e Comma METHOD_CALL_EXPR:mce 
        | EXPR:e RightParent

METHOD_CALL_CALLOUT ::= CALLOUT_ARG:ca Comma METHOD_CALL_CALLOUT:mcc
        | CALLOUT_ARG:ca RightParent 

METHOD_NAME ::= Id:i

LOCATION ::= Id:i LOCATION_EXPR:le

LOCATION_EXPR ::= LeftBracket EXPR:e RightBracket

EXPR ::= LOCATION:lo 
        | METHOD_CALL:mc
        | LITERAL:li 
        | EXPR:e1 BIN_OP:bo EXPR:e2
        | Substract EXPR:e
        | Exclam EXPR:e
        | LeftParent EXPR:e RightParent

CALLOUT_ARG ::= EXPR:e 
        | StringLiteral:sl

BIN_OP ::= ARITH_OP:ao 
        | REL_OP:ro
        | EQ_OP:eo
        | COND_OP:co

ARITH_OP ::= Add 
        | Substract
        | Multiplication
        | Division
        | Mod

REL_OP ::= LessThan 
        | GreaterThan
        | LessEqualThan
        | GreaterEqualThan

EQ_OP ::= Equal
        | NotEqual

COND_OP ::= And
        | Or

LITERAL ::= INT_LITERAL:il 
        | BOOL_LITERAL:bl
        | CharLiteral:cl

INT_LITERAL ::= DecimalLiteral:d
            | HexLiteral:h

BOOL_LITERAL ::= True:tt
            | False:ff 