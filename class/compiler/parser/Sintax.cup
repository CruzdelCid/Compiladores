package parser;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Class, Program, Void, Int, Boolean, If, Else, For, Return, Break, Continue,
    True, False, String, Digit, Alpha, Id, HexDigit, HexLiteral, DecimalLiteral, 
    Asign, AsignAdd, AsignSubs, Add, Substract, Multiplication, Division, Percentage, 
    LessThan, GreaterThan, LessEqualThan, GreaterEqualThan, Equal, NotEqual, And, Or, 
    SemiColom, LeftParent, RightParent, LeftBracket, RightBracket, LeftKey, RightKey,
    ParentOpenClose, BracketOpenClose, KeyOpenClose,
    StringLiteral, ERROR; 

non terminal INICIO, PROGRAM, FIELD_DECL, METHOD_DECL, 
;

precedence left Add, Substract, Multiplication, Division, Percentage, LessThan, GreaterThan, LessEqualThan, 
GreaterEqualThan, Equal, NotEqual, And, Or; 

start with INICIO;

INICIO ::= PROGRAM 
;
PROGRAM ::= Class Program KeyOpenClose
        | Class Program LeftKey FIELD_DECL METHOD_DECL RightKey
        | Class Program LeftKey METHOD_DECL RightKey
        | Class Program LeftKey FIELD_DECL RightKey
;


PROGRAM ::= Class Program KeyOpenClose
        | Class Program LeftKey FIELD_FIELD_DECL
;

FIELD_FIELD_DECL ::= FIELD_DECL FIELD_FIELD_DECL
                | METHOD_DECL METHOD_METHOD_DECL
                | RightKey
;

METHOD_METHOD_DECL ::= METHOD_DECL METHOD_METHOD_DECL
                | RightKey


FIELD_DECL ::= TYPE DECL
;

DECL ::= Id FIELD_CLOSE 
        | Id LeftBracket INT_LITERAL RightBracket FIELD_CLOSE
; 

FIELD_CLOSE ::= Comma DECL 
		| SemiColom 
; 



METHOD_DECL ::= TYPE Id LeftParent M_DECL 
            | Void Id LeftParent M_DECL  
            | TYPE Id ParentOpenClose BLOCK
            | Void Id ParentOpenClose BLOCK
;
M_DECL ::= TYPE Id RightParent BLOCK
        | TYPE Id Comma M_DECL 
; 



// HAY QUE HACER RECURSIVO VAR_DECL Y STATEMENT
BLOCK ::= LeftKey VAR_DECL STATEMENT RightKey
        | LeftKey STATEMENT RightKey
; 


/*
INICIO ::= 
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;
DECLARACION ::= 
    Int Identificador P_coma | 
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;
IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;
*/

