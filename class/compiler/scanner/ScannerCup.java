/* The following code was generated by JFlex 1.4.3 on 10/2/22, 5:12 PM */

package scanner;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/2/22, 5:12 PM from the specification file
 * <tt>C:/Users/danie/Desktop/Compiladores/class/compiler/scanner/LexerCup.flex</tt>
 */
public class ScannerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8,  0,  0, 49,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    13, 38, 48,  0,  0, 35, 39,  0, 42, 43, 34, 32, 30, 33,  0, 29, 
     4,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 41, 36, 31, 37,  0, 
     0,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
    14,  2,  2,  2,  2,  2,  2,  2,  5,  2,  2, 44,  7, 45,  0,  0, 
     0, 11, 24,  9, 21, 25, 26, 17,  2, 20,  2, 28, 10, 18, 22, 16, 
     2,  2, 15, 12, 23, 27, 19,  2,  5,  2,  2, 46, 40, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\2\1\4\10\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\3\1\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\2\1\3\1\2\1\4\1\26\10\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\3\25\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\27\1\30\1\31\1\0\6\31\1\32\6\31\1\4"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\30\1\31\1\25\1\43\1\44\1\45\1\46\6\31"+
    "\1\32\6\31\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\47\5\31\1\50\5\31\1\51\1\47"+
    "\5\31\1\50\5\31\1\51\4\31\1\52\1\53\2\31"+
    "\1\54\5\31\1\52\1\53\2\31\1\54\5\31\1\55"+
    "\1\31\1\56\4\31\1\55\1\31\1\56\1\0\2\31"+
    "\1\57\1\31\1\25\2\31\1\57\1\31\1\0\1\60"+
    "\1\31\1\61\1\25\1\60\1\31\1\61\1\0\1\62"+
    "\1\25\1\62\1\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\2\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\144\0\u0320\0\u0352\0\u0384\0\144\0\144\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\144\0\144\0\144\0\144\0\144"+
    "\0\144\0\144\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u04b0\0\u079e\0\u07d0\0\u0802\0\u04b0\0\u04b0\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u04b0\0\u04b0\0\u04b0\0\u04b0"+
    "\0\u04b0\0\u04b0\0\u04b0\0\144\0\226\0\310\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\310\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\144\0\144\0\144"+
    "\0\144\0\144\0\144\0\144\0\144\0\u04e2\0\u0514\0\u0bea"+
    "\0\144\0\144\0\144\0\144\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0514\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0"+
    "\0\u04b0\0\u092e\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\310"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\310\0\u0bea\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u0514\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u0514\0\u125c\0\u128e\0\u12c0\0\u12f2\0\310"+
    "\0\310\0\u1324\0\u1356\0\310\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u0514\0\u0514\0\u1482\0\u14b4\0\u0514\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\310\0\u15e0\0\310\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u0514\0\u16da\0\u0514\0\u170c\0\u173e\0\u1770"+
    "\0\310\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u0514\0\u186a\0\u189c"+
    "\0\310\0\u18ce\0\310\0\u1900\0\u0514\0\u1932\0\u0514\0\u1964"+
    "\0\310\0\u1996\0\u0514\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\144\0\u04b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\5\1\7\1\3\1\7"+
    "\1\10\3\5\1\7\1\5\1\11\3\5\1\12\1\13"+
    "\2\5\1\14\1\15\1\16\1\17\2\5\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\3\1\7\1\43\1\44\2\45\1\46\1\45"+
    "\1\47\1\50\1\7\1\51\3\45\1\47\1\45\1\52"+
    "\3\45\1\53\1\54\2\45\1\55\1\56\1\57\1\60"+
    "\2\45\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\7\63\0\1\105"+
    "\2\0\1\105\56\0\5\106\3\0\4\106\1\0\17\106"+
    "\26\0\1\105\2\0\1\105\1\107\62\0\1\7\1\0"+
    "\1\7\4\0\1\7\43\0\1\7\1\0\5\106\3\0"+
    "\1\106\1\110\1\111\1\106\1\0\2\106\1\112\14\106"+
    "\26\0\5\106\3\0\4\106\1\0\13\106\1\113\3\106"+
    "\26\0\5\106\3\0\4\106\1\0\2\106\1\114\14\106"+
    "\26\0\5\106\3\0\4\106\1\0\10\106\1\115\3\106"+
    "\1\116\2\106\26\0\5\106\3\0\4\106\1\0\1\106"+
    "\1\117\15\106\26\0\5\106\3\0\4\106\1\0\1\106"+
    "\1\120\1\121\14\106\26\0\5\106\3\0\1\106\1\122"+
    "\2\106\1\0\17\106\26\0\5\106\3\0\2\106\1\123"+
    "\1\106\1\0\2\106\1\124\14\106\62\0\1\125\63\0"+
    "\1\126\61\0\1\127\61\0\1\130\61\0\1\131\61\0"+
    "\1\132\61\0\1\133\71\0\1\134\62\0\1\135\11\0"+
    "\7\43\2\0\47\43\2\0\1\43\1\136\2\43\1\136"+
    "\2\43\2\0\47\43\2\0\1\43\5\137\1\43\2\0"+
    "\4\137\1\43\17\137\23\43\2\0\1\43\1\136\2\43"+
    "\1\136\1\140\1\43\2\0\47\43\2\0\6\43\1\47"+
    "\1\0\1\7\4\43\1\47\42\43\1\0\1\7\17\0"+
    "\1\141\6\0\1\142\1\143\30\0\1\144\1\0\1\43"+
    "\5\137\1\43\2\0\1\137\1\145\1\146\1\137\1\43"+
    "\2\137\1\147\14\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\4\137\1\43\13\137\1\150\3\137\23\43\2\0"+
    "\1\43\5\137\1\43\2\0\4\137\1\43\2\137\1\151"+
    "\14\137\23\43\2\0\1\43\5\137\1\43\2\0\4\137"+
    "\1\43\10\137\1\152\3\137\1\153\2\137\23\43\2\0"+
    "\1\43\5\137\1\43\2\0\4\137\1\43\1\137\1\154"+
    "\15\137\23\43\2\0\1\43\5\137\1\43\2\0\4\137"+
    "\1\43\1\137\1\155\1\156\14\137\23\43\2\0\1\43"+
    "\5\137\1\43\2\0\1\137\1\157\2\137\1\43\17\137"+
    "\23\43\2\0\1\43\5\137\1\43\2\0\2\137\1\160"+
    "\1\137\1\43\2\137\1\161\14\137\23\43\2\0\7\43"+
    "\2\0\24\43\1\125\22\43\2\0\7\43\2\0\26\43"+
    "\1\162\20\43\2\0\7\43\2\0\26\43\1\163\20\43"+
    "\2\0\7\43\2\0\26\43\1\164\20\43\2\0\7\43"+
    "\2\0\26\43\1\165\20\43\2\0\7\43\2\0\26\43"+
    "\1\166\20\43\2\0\7\43\2\0\26\43\1\167\20\43"+
    "\2\0\7\43\2\0\36\43\1\170\10\43\2\0\7\43"+
    "\2\0\37\43\1\171\7\43\3\0\1\172\1\0\2\172"+
    "\4\0\1\172\1\0\1\172\11\0\1\172\2\0\3\172"+
    "\30\0\5\106\3\0\2\106\1\173\1\106\1\0\17\106"+
    "\26\0\5\106\3\0\1\106\1\174\2\106\1\0\17\106"+
    "\26\0\5\106\3\0\4\106\1\0\10\106\1\175\6\106"+
    "\26\0\5\106\3\0\4\106\1\0\11\106\1\176\5\106"+
    "\26\0\5\106\3\0\4\106\1\0\6\106\1\177\10\106"+
    "\26\0\5\106\3\0\4\106\1\0\11\106\1\200\5\106"+
    "\26\0\5\106\3\0\4\106\1\0\15\106\1\201\1\106"+
    "\26\0\5\106\3\0\4\106\1\0\13\106\1\202\3\106"+
    "\26\0\5\106\3\0\4\106\1\0\2\106\1\203\14\106"+
    "\26\0\5\106\3\0\3\106\1\204\1\0\17\106\26\0"+
    "\5\106\3\0\1\106\1\205\2\106\1\0\17\106\26\0"+
    "\5\106\3\0\4\106\1\0\1\106\1\206\15\106\25\0"+
    "\10\125\1\0\51\125\1\43\1\207\1\43\2\207\2\43"+
    "\2\0\1\207\1\43\1\207\11\43\1\207\2\43\3\207"+
    "\25\43\2\0\1\43\5\137\1\43\2\0\2\137\1\210"+
    "\1\137\1\43\17\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\1\137\1\211\2\137\1\43\17\137\23\43\2\0"+
    "\1\43\5\137\1\43\2\0\4\137\1\43\10\137\1\212"+
    "\6\137\23\43\2\0\1\43\5\137\1\43\2\0\4\137"+
    "\1\43\11\137\1\213\5\137\23\43\2\0\1\43\5\137"+
    "\1\43\2\0\4\137\1\43\6\137\1\214\10\137\23\43"+
    "\2\0\1\43\5\137\1\43\2\0\4\137\1\43\11\137"+
    "\1\215\5\137\23\43\2\0\1\43\5\137\1\43\2\0"+
    "\4\137\1\43\15\137\1\216\1\137\23\43\2\0\1\43"+
    "\5\137\1\43\2\0\4\137\1\43\13\137\1\217\3\137"+
    "\23\43\2\0\1\43\5\137\1\43\2\0\4\137\1\43"+
    "\2\137\1\220\14\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\3\137\1\221\1\43\17\137\23\43\2\0\1\43"+
    "\5\137\1\43\2\0\1\137\1\222\2\137\1\43\17\137"+
    "\23\43\2\0\1\43\5\137\1\43\2\0\4\137\1\43"+
    "\1\137\1\223\15\137\23\43\3\0\5\106\3\0\3\106"+
    "\1\224\1\0\17\106\26\0\5\106\3\0\1\106\1\225"+
    "\2\106\1\0\17\106\26\0\5\106\3\0\4\106\1\0"+
    "\11\106\1\226\5\106\26\0\5\106\3\0\4\106\1\0"+
    "\15\106\1\227\1\106\26\0\5\106\3\0\4\106\1\0"+
    "\7\106\1\230\7\106\26\0\5\106\3\0\4\106\1\0"+
    "\13\106\1\231\3\106\26\0\5\106\3\0\2\106\1\232"+
    "\1\106\1\0\17\106\26\0\5\106\3\0\1\106\1\233"+
    "\2\106\1\0\17\106\26\0\5\106\3\0\4\106\1\0"+
    "\13\106\1\234\3\106\26\0\5\106\3\0\3\106\1\235"+
    "\1\0\17\106\25\0\1\43\5\137\1\43\2\0\3\137"+
    "\1\236\1\43\17\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\1\137\1\237\2\137\1\43\17\137\23\43\2\0"+
    "\1\43\5\137\1\43\2\0\4\137\1\43\11\137\1\240"+
    "\5\137\23\43\2\0\1\43\5\137\1\43\2\0\4\137"+
    "\1\43\15\137\1\241\1\137\23\43\2\0\1\43\5\137"+
    "\1\43\2\0\4\137\1\43\7\137\1\242\7\137\23\43"+
    "\2\0\1\43\5\137\1\43\2\0\4\137\1\43\13\137"+
    "\1\243\3\137\23\43\2\0\1\43\5\137\1\43\2\0"+
    "\2\137\1\244\1\137\1\43\17\137\23\43\2\0\1\43"+
    "\5\137\1\43\2\0\1\137\1\245\2\137\1\43\17\137"+
    "\23\43\2\0\1\43\5\137\1\43\2\0\4\137\1\43"+
    "\13\137\1\246\3\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\3\137\1\247\1\43\17\137\23\43\3\0\5\106"+
    "\3\0\3\106\1\250\1\0\17\106\26\0\5\106\3\0"+
    "\4\106\1\0\2\106\1\251\14\106\26\0\5\106\3\0"+
    "\4\106\1\0\6\106\1\252\10\106\26\0\5\106\3\0"+
    "\4\106\1\0\1\106\1\253\15\106\26\0\5\106\3\0"+
    "\4\106\1\0\16\106\1\254\26\0\5\106\3\0\4\106"+
    "\1\0\13\106\1\255\3\106\26\0\5\106\3\0\4\106"+
    "\1\0\13\106\1\256\3\106\25\0\1\43\5\137\1\43"+
    "\2\0\3\137\1\257\1\43\17\137\23\43\2\0\1\43"+
    "\5\137\1\43\2\0\4\137\1\43\2\137\1\260\14\137"+
    "\23\43\2\0\1\43\5\137\1\43\2\0\4\137\1\43"+
    "\6\137\1\261\10\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\4\137\1\43\1\137\1\262\15\137\23\43\2\0"+
    "\1\43\5\137\1\43\2\0\4\137\1\43\16\137\1\263"+
    "\23\43\2\0\1\43\5\137\1\43\2\0\4\137\1\43"+
    "\13\137\1\264\3\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\4\137\1\43\13\137\1\265\3\137\23\43\3\0"+
    "\5\106\3\0\4\106\1\266\17\106\26\0\5\106\3\0"+
    "\4\106\1\0\15\106\1\267\1\106\26\0\5\106\3\0"+
    "\4\106\1\0\10\106\1\270\6\106\26\0\5\106\3\0"+
    "\4\106\1\0\10\106\1\271\6\106\26\0\5\106\3\0"+
    "\2\106\1\272\1\106\1\0\17\106\25\0\1\43\5\137"+
    "\1\43\2\0\4\137\1\273\17\137\23\43\2\0\1\43"+
    "\5\137\1\43\2\0\4\137\1\43\15\137\1\274\1\137"+
    "\23\43\2\0\1\43\5\137\1\43\2\0\4\137\1\43"+
    "\10\137\1\275\6\137\23\43\2\0\1\43\5\137\1\43"+
    "\2\0\4\137\1\43\10\137\1\276\6\137\23\43\2\0"+
    "\1\43\5\137\1\43\2\0\2\137\1\277\1\137\1\43"+
    "\17\137\23\43\20\0\1\300\44\0\5\106\3\0\4\106"+
    "\1\0\11\106\1\301\5\106\26\0\5\106\3\0\4\106"+
    "\1\0\15\106\1\302\1\106\26\0\5\106\3\0\4\106"+
    "\1\0\10\106\1\303\6\106\25\0\7\43\2\0\5\43"+
    "\1\304\41\43\2\0\1\43\5\137\1\43\2\0\4\137"+
    "\1\43\11\137\1\305\5\137\23\43\2\0\1\43\5\137"+
    "\1\43\2\0\4\137\1\43\15\137\1\306\1\137\23\43"+
    "\2\0\1\43\5\137\1\43\2\0\4\137\1\43\10\137"+
    "\1\307\6\137\23\43\21\0\1\310\43\0\5\106\3\0"+
    "\4\106\1\0\13\106\1\311\3\106\25\0\7\43\2\0"+
    "\6\43\1\312\40\43\2\0\1\43\5\137\1\43\2\0"+
    "\4\137\1\43\13\137\1\313\3\137\23\43\22\0\1\314"+
    "\41\0\7\43\2\0\7\43\1\315\37\43\23\0\1\316"+
    "\40\0\7\43\2\0\10\43\1\317\36\43\21\0\1\320"+
    "\42\0\7\43\2\0\6\43\1\321\40\43\15\0\1\322"+
    "\46\0\7\43\2\0\2\43\1\323\44\43\24\0\1\324"+
    "\37\0\7\43\2\0\11\43\1\325\35\43\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\15\1\1\11\3\1\2\11\5\1\7\11"+
    "\41\1\1\11\2\1\1\0\16\1\10\11\3\1\4\11"+
    "\121\1\1\0\11\1\1\0\7\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return new Symbol(sym.GreaterThan, yychar, yyline, yytext());
          }
        case 52: break;
        case 27: 
          { return new Symbol(sym.Equal, yychar, yyline, yytext());
          }
        case 53: break;
        case 42: 
          { return new Symbol(sym.Void, yychar, yyline, yytext());
          }
        case 54: break;
        case 40: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 55: break;
        case 12: 
          { return new Symbol(sym.LessThan, yychar, yyline, yytext());
          }
        case 56: break;
        case 18: 
          { return new Symbol(sym.RightBracket, yychar, yyline, yytext());
          }
        case 57: break;
        case 45: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 58: break;
        case 6: 
          { return new Symbol(sym.Comma, yychar, yyline, yytext());
          }
        case 59: break;
        case 44: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 60: break;
        case 2: 
          { return new Symbol(sym.Digit, yychar, yyline, yytext());
          }
        case 61: break;
        case 15: 
          { return new Symbol(sym.LeftParent, yychar, yyline, yytext());
          }
        case 62: break;
        case 25: 
          { return new Symbol(sym.Id, yychar, yyline, yytext());
          }
        case 63: break;
        case 5: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 64: break;
        case 28: 
          { return new Symbol(sym.AsignSum, yychar, yyline, yytext());
          }
        case 65: break;
        case 11: 
          { return new Symbol(sym.Percentage, yychar, yyline, yytext());
          }
        case 66: break;
        case 19: 
          { return new Symbol(sym.LeftKey, yychar, yyline, yytext());
          }
        case 67: break;
        case 49: 
          { return new Symbol(sym.Boolean, yychar, yyline, yytext());
          }
        case 68: break;
        case 9: 
          { return new Symbol(sym.Substract, yychar, yyline, yytext());
          }
        case 69: break;
        case 16: 
          { return new Symbol(sym.RightParent, yychar, yyline, yytext());
          }
        case 70: break;
        case 41: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 71: break;
        case 14: 
          { return new Symbol(sym.SemiColom, yychar, yyline, yytext());
          }
        case 72: break;
        case 50: 
          { return new Symbol(sym.Continue, yychar, yyline, yytext());
          }
        case 73: break;
        case 8: 
          { return new Symbol(sym.Sum, yychar, yyline, yytext());
          }
        case 74: break;
        case 29: 
          { return new Symbol(sym.AsignSubs, yychar, yyline, yytext());
          }
        case 75: break;
        case 30: 
          { return new Symbol(sym.LessEqualThan, yychar, yyline, yytext());
          }
        case 76: break;
        case 20: 
          { return new Symbol(sym.RightKey, yychar, yyline, yytext());
          }
        case 77: break;
        case 32: 
          { return new Symbol(sym.NotEqual, yychar, yyline, yytext());
          }
        case 78: break;
        case 22: 
          { string.append(’\\’);
          }
        case 79: break;
        case 38: 
          { string.append("\"");
          }
        case 80: break;
        case 39: 
          { return new Symbol(sym.HexLiteral, yychar, yyline, yytext());
          }
        case 81: break;
        case 47: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 82: break;
        case 24: 
          { return new Symbol(sym.DecimalLiteral, yychar, yyline, yytext());
          }
        case 83: break;
        case 26: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 84: break;
        case 33: 
          { return new Symbol(sym.And, yychar, yyline, yytext());
          }
        case 85: break;
        case 7: 
          { return new Symbol(sym.Asign, yychar, yyline, yytext());
          }
        case 86: break;
        case 51: 
          { return new Symbol(sym.ClassProgram, yychar, yyline, yytext());
          }
        case 87: break;
        case 48: 
          { return new Symbol(sym.Callout, yychar, yyline, yytext());
          }
        case 88: break;
        case 36: 
          { string.append(’\n’);
          }
        case 89: break;
        case 31: 
          { return new Symbol(sym.GreaterEqualThan, yychar, yyline, yytext());
          }
        case 90: break;
        case 35: 
          { string.append(’\r’);
          }
        case 91: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 92: break;
        case 37: 
          { string.append(’\t’);
          }
        case 93: break;
        case 10: 
          { return new Symbol(sym.Multiplication, yychar, yyline, yytext());
          }
        case 94: break;
        case 46: 
          { return new Symbol(sym.False, yychar, yyline, yytext());
          }
        case 95: break;
        case 34: 
          { return new Symbol(sym.Or, yychar, yyline, yytext());
          }
        case 96: break;
        case 4: 
          { /*Ignore*/
          }
        case 97: break;
        case 43: 
          { return new Symbol(sym.True, yychar, yyline, yytext());
          }
        case 98: break;
        case 21: 
          { string.append( yytext() );
          }
        case 99: break;
        case 17: 
          { return new Symbol(sym.LeftBracket, yychar, yyline, yytext());
          }
        case 100: break;
        case 23: 
          { yybegin(YYINITIAL); 
                     return new Symbol(sym.StringLiteral, yychar, yyline, string.toString();)
          }
        case 101: break;
        case 3: 
          { return new Symbol(sym.Alpha, yychar, yyline, yytext());
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
