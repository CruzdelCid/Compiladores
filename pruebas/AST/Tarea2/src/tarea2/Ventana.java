/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarea2;

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;

/**
 *
 * @author Oscar
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    AnalizadorLexico lexico;
    AnalizadorSintactico sintactico;
    
    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Compilar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Graficar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 0, 51));
        jTextArea2.setRows(5);
        jTextArea2.setDisabledTextColor(new java.awt.Color(255, 0, 51));
        jTextArea2.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(19, 19, 19))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String entrada;
        entrada = this.jTextArea1.getText();
        
        lexico = new AnalizadorLexico(new BufferedReader( new StringReader(entrada)));
        
        sintactico = new AnalizadorSintactico(lexico);
        
        try{
            sintactico.parse();
            TipoDato res = (TipoDato) ejecutar(sintactico.padre);
            
            switch(res.getTipo())
            {
                case "entero":
                    jTextArea2.setText("Es entero: "+res.getEntero());
                    break;
                case "decimal":
                    jTextArea2.setText("Es decimal: "+res.getDecimal());
                    break;
                case "tstring":
                    jTextArea2.setText("Es tstring: "+res.getTstring());
                    break;
                case "tchar":
                    jTextArea2.setText("Es tchar: "+res.getTchar());
                    break;
                case "booleano":
                    jTextArea2.setText("Es booleano: "+res.getBooleano());
                    break;
            }
        }catch(Exception ex){
            System.out.println("Error "+ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(sintactico != null){
            if(sintactico.padre != null){
                graficar(sintactico.padre);
                System.out.println("Se ha graficado con exito");
            }
        }
        else
            System.out.println("No se puede graficar!!!");
        
    }//GEN-LAST:event_jButton2ActionPerformed

    public Object ejecutar(Nodo raiz){
        
        String r = raiz.getNombre();
        ArrayList<Nodo> hijos = raiz.getHijos();
        
        TipoDato tmp;
        TipoDato tmp_izq;
        TipoDato tmp_der;
        boolean izq;
        boolean der;
        
        switch(r)
        {
            case "EXP":
                
                //System.out.println("EXP:"+hijos.get(0).getNombre());
                return ejecutar(hijos.get(0));
            case "||":
                izq = (boolean) ejecutar(hijos.get(0));
                der = (boolean) ejecutar(hijos.get(1));
                
                if (izq == false && der == false)
                    return false;
                else
                    return true;
            case "!||":
                izq = (boolean) ejecutar(hijos.get(0));
                der = (boolean) ejecutar(hijos.get(1));
                
                if (izq == false && der == false)
                    return true;
                else
                    return false;
            case "&|":
                izq = (boolean) ejecutar(hijos.get(0));
                der = (boolean) ejecutar(hijos.get(1));
                
                if ((izq == true && der == false) || (izq == false && der == true))
                    return true;
                else
                    return false;
            case "&&":
                izq = (boolean) ejecutar(hijos.get(0));
                der = (boolean) ejecutar(hijos.get(1));
                
                if (izq == true && der == true)
                    return true;
                else
                    return false;
            case "!&&":
                izq = (boolean) ejecutar(hijos.get(0));
                der = (boolean) ejecutar(hijos.get(1));
                
                if (izq == true && der == true)
                    return false;
                else
                    return true;
            case "!":
                der = (boolean) ejecutar(hijos.get(0));
                
                if (der == true)
                    return false;
                else
                    return true;
            case "==":
                return null;
            case "!=":
                return null;
            case "<":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                if(tmp_izq != null && tmp_der != null)
                {
                    switch(tmp_izq.getTipo())
                    {
                        case "entero":
                            switch (tmp_der.getTipo()) {
                                case "entero": //entero >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() < tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //entero >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() < tmp_der.getDecimal());
                                    return tmp;
                            }
                        case "decimal":
                            switch (tmp_der.getTipo()) {
                                case "entero": //decimal >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() < tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //decimal >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() < tmp_der.getDecimal());
                                    return tmp;
                            }
                    }
                }
                
                return null;
            case "<=":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                if(tmp_izq != null && tmp_der != null)
                {
                    switch(tmp_izq.getTipo())
                    {
                        case "entero":
                            switch (tmp_der.getTipo()) {
                                case "entero": //entero >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() <= tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //entero >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() <= tmp_der.getDecimal());
                                    return tmp;
                            }
                        case "decimal":
                            switch (tmp_der.getTipo()) {
                                case "entero": //decimal >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() <= tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //decimal >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() <= tmp_der.getDecimal());
                                    return tmp;
                            }
                    }
                }
                
                return null;
            case ">":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                if(tmp_izq != null && tmp_der != null)
                {
                    switch(tmp_izq.getTipo())
                    {
                        case "entero":
                            switch (tmp_der.getTipo()) {
                                case "entero": //entero >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() > tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //entero >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() > tmp_der.getDecimal());
                                    return tmp;
                            }
                        case "decimal":
                            switch (tmp_der.getTipo()) {
                                case "entero": //decimal >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() > tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //decimal >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() > tmp_der.getDecimal());
                                    return tmp;
                            }
                    }
                }
                
                return null;
            case ">=":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                if(tmp_izq != null && tmp_der != null)
                {
                    switch(tmp_izq.getTipo())
                    {
                        case "entero":
                            switch (tmp_der.getTipo()) {
                                case "entero": //entero >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() >= tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //entero >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getEntero() >= tmp_der.getDecimal());
                                    return tmp;
                            }
                        case "decimal":
                            switch (tmp_der.getTipo()) {
                                case "entero": //decimal >= entero
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() >= tmp_der.getEntero());
                                    return tmp;
                                case "decimal": //decimal >= decimal
                                    tmp = new TipoDato("booleano");
                                    tmp.setBooleano(tmp_izq.getDecimal() >= tmp_der.getDecimal());
                                    return tmp;
                            }
                    }
                }
                
                return null;
            case "+":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                return ejecutarOperaciones(tmp_izq,tmp_der,"+");
            case "-":
                
                if(hijos.size()>1)
                {
                    tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                    tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                    return ejecutarOperaciones(tmp_izq,tmp_der,"-");
                }
                else   
                {
                    tmp_der = (TipoDato) ejecutar(hijos.get(0));
                    
                    if(tmp_der.getTipo() == "entero")
                    {
                        tmp_der.setEntero(tmp_der.getEntero()*-1);
                        return tmp_der;
                    }
                    else if (tmp_der.getTipo() == "decimal")
                    {
                        tmp_der.setDecimal(tmp_der.getDecimal()*-1);
                        return tmp_der;
                    }
                }
            case "*":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                return ejecutarOperaciones(tmp_izq,tmp_der,"*");
            case "/":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                return ejecutarOperaciones(tmp_izq,tmp_der,"/");
            case "^":
                tmp_izq = (TipoDato) ejecutar(hijos.get(0));
                tmp_der =(TipoDato) ejecutar(hijos.get(1));
                
                return ejecutarOperaciones(tmp_izq,tmp_der,"^");
            case "numero":
                tmp = new TipoDato("entero");
                tmp.setEntero(Integer.parseInt(raiz.getValor()));
                return tmp;
            case "decimal":
                tmp = new TipoDato("decimal");
                tmp.setDecimal(Double.parseDouble(raiz.getValor()));
                return tmp;
            case "tchar":
                tmp = new TipoDato("tchar");
                if(raiz.getValor().length() > 3){
                    String t = raiz.getValor().charAt(2)+"";

                    if(t == "t")
                        tmp.setTchar('\t');
                    else if(t == "n")
                        tmp.setTchar('\n');
                    else if(t == "'")
                        tmp.setTchar('\'');
                    else if(t == "^")
                        tmp.setTchar('^');
                    
                } else {
                    tmp.setTchar(raiz.getValor().charAt(1));
                }
                return tmp;
            case "tstring":
                tmp = new TipoDato("tstring");
                tmp.setTstring(raiz.getValor());
                return tmp;
            case "true":
                tmp = new TipoDato("booleano");
                tmp.setBooleano(true);
                return tmp;
            case "verdadero":
                tmp = new TipoDato("booleano");
                tmp.setBooleano(true);
                return tmp;
            case "false":
                tmp = new TipoDato("booleano");
                tmp.setBooleano(false);
                return tmp;
            case "falso":
                tmp = new TipoDato("booleano");
                tmp.setBooleano(false);
                return tmp;
        }
        return null;
    }
    
    public TipoDato ejecutarOperaciones(TipoDato Iop, TipoDato Dop,String op){
        if(Iop == null || Dop == null)
            return null;
        
        TipoDato resultado;
        switch(Iop.getTipo())
        {
            case "entero":
                switch(Dop.getTipo())
                {
                    case "entero": //entero op entero
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getEntero() + Dop.getEntero());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getEntero() - Dop.getEntero());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getEntero() * Dop.getEntero());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getEntero() / Dop.getEntero());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("entero");
                                resultado.setEntero((int)Math.pow(Iop.getEntero(), Dop.getEntero()));
                                return resultado;
                        }
                    case "decimal": // entero op decimal
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getEntero() + Dop.getDecimal());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getEntero() - Dop.getDecimal());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getEntero() * Dop.getDecimal());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getEntero() / Dop.getDecimal());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal((double)Math.pow(Iop.getEntero(), Dop.getDecimal()));
                                System.out.println("entra");
                                return resultado;
                        }
                    case "tstring":// entero op tstring
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("tstring");
                                resultado.setTstring(Iop.getEntero() + Dop.getTstring());
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                return null;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                    case "tchar": // entero op tchar
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getEntero() + Dop.getTchar());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getEntero() - Dop.getTchar());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getEntero() * Dop.getTchar());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getEntero() / Dop.getTchar());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("entero");
                                resultado.setEntero((int)Math.pow(Iop.getEntero(), Dop.getTchar()));
                                return resultado;
                        }
                    case "booleano": //entero op booleano
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("entero");
                                if(Dop.getBooleano() == true)
                                    resultado.setEntero(Iop.getEntero() + 1);
                                else
                                    resultado.setEntero(Iop.getEntero());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("entero");
                                if(Dop.getBooleano() == true)
                                    resultado.setEntero(Iop.getEntero() - 1);
                                else
                                    resultado.setEntero(Iop.getEntero());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("entero");
                                if(Dop.getBooleano() == true)
                                    resultado.setEntero(Iop.getEntero() * 1);
                                else
                                    resultado.setEntero(Iop.getEntero() * 0);
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                if(Dop.getBooleano() == true)
                                    resultado.setDecimal(Iop.getEntero() / 1);
                                else
                                    return null;
                                return resultado;
                            case "^":
                                resultado = new TipoDato("entero");
                                if(Dop.getBooleano() == true)
                                    resultado.setEntero((int)Math.pow(Iop.getEntero(), 1));
                                else
                                    resultado.setEntero((int)Math.pow(Iop.getEntero(), 0));
                                return resultado;
                        }
                }
            case "decimal":
                switch(Dop.getTipo())
                {
                    case "entero": //decimal op entero
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() + Dop.getEntero());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() - Dop.getEntero());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() * Dop.getEntero());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() / Dop.getEntero());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal((double)Math.pow(Iop.getDecimal(), Dop.getEntero()));
                                return resultado;
                        }
                    case "decimal"://decimal op decimal
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() + Dop.getDecimal());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() - Dop.getDecimal());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() * Dop.getDecimal());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() / Dop.getDecimal());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal((double)Math.pow(Iop.getDecimal(), Dop.getDecimal()));
                                return resultado;
                        }
                    case "tstring"://decimal op tstring
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("tstring");
                                resultado.setTstring(Iop.getDecimal() + Dop.getTstring());
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                return null;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                    case "tchar"://decimal op tchar
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() + Dop.getTchar());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() - Dop.getTchar());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() * Dop.getTchar());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getDecimal() / Dop.getTchar());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal((double)Math.pow(Iop.getDecimal(), Dop.getTchar()));
                                return resultado;
                        }
                    case "booleano"://decimal op booleano
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("decimal");
                                if(Dop.getBooleano() == true)
                                    resultado.setDecimal(Iop.getDecimal() + 1);
                                else
                                    resultado.setDecimal(Iop.getDecimal());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("decimal");
                                if(Dop.getBooleano() == true)
                                    resultado.setDecimal(Iop.getDecimal() - 1);
                                else
                                    resultado.setDecimal(Iop.getDecimal());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("decimal");
                                if(Dop.getBooleano() == true)
                                    resultado.setDecimal(Iop.getDecimal() * 1);
                                else
                                    resultado.setDecimal(Iop.getDecimal() * 0);
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                if(Dop.getBooleano() == true)
                                    resultado.setDecimal(Iop.getDecimal() / 1);
                                else
                                    return null;
                                return resultado;
                            case "^":
                                resultado = new TipoDato("decimal");
                                if(Dop.getBooleano() == true)
                                    resultado.setDecimal((double)Math.pow(Iop.getDecimal(), 1));
                                else
                                    resultado.setDecimal((double)Math.pow(Iop.getDecimal(), 0));
                                return resultado;
                        }
                }
            case "tstring":
                switch(Dop.getTipo())
                {
                    case "entero": //tstring op entero
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("tstring");
                                resultado.setTstring(Iop.getTstring() + Dop.getEntero());
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                return null;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                    case "decimal": //tstring op decimal
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("tstring");
                                resultado.setTstring(Iop.getTstring() + Dop.getDecimal());
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                return null;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                    case "tstring": //tstring op tstring
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("tstring");
                                resultado.setTstring(Iop.getTstring() + Dop.getTstring());
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                return null;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                    case "tchar": //tstring op tchar
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("tstring");
                                resultado.setTstring(Iop.getTstring() + Dop.getTchar());
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                return null;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                    case "booleano": //tstring op booleano
                        return null;
                }
            case "tchar":
                switch(Dop.getTipo())
                {
                    case "entero": //tchar op entero
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getTchar() + Dop.getEntero());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getTchar() - Dop.getEntero());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("entero");
                                resultado.setEntero(Iop.getTchar() * Dop.getEntero());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getTchar() / Dop.getEntero());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("entero");
                                resultado.setEntero((int)Math.pow(Iop.getTchar(), Dop.getEntero()));
                                return resultado;
                        }
                    case "decimal": //tchar op decimal
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getTchar() + Dop.getDecimal());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getTchar() - Dop.getDecimal());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getTchar() * Dop.getDecimal());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal(Iop.getTchar() / Dop.getDecimal());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("decimal");
                                resultado.setDecimal((int)Math.pow(Iop.getTchar(), Dop.getDecimal()));
                                return resultado;
                        }
                    case "tstring": //tchar op tstring
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("tstring");
                                resultado.setTstring(Iop.getTchar() + Dop.getTstring());
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                return null;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                    case "tchar": //tchar op tchar
                        return null;
                    case "booleano": //tchar op booleano
                        return null;
                }
            case "booleano":
                switch(Dop.getTipo())
                {
                    case "entero": //booleano op entero
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("entero");
                                if(Iop.getBooleano() == true)
                                    resultado.setEntero(1+Dop.getEntero());
                                else
                                    resultado.setEntero(0+Dop.getEntero());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("entero");
                                if(Iop.getBooleano() == true)
                                    resultado.setEntero(1-Dop.getEntero());
                                else
                                    resultado.setEntero(0-Dop.getEntero());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("entero");
                                if(Iop.getBooleano() == true)
                                    resultado.setEntero(1*Dop.getEntero());
                                else
                                    resultado.setEntero(0*Dop.getEntero());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                if(Iop.getBooleano() == true)
                                    resultado.setDecimal(1/Dop.getEntero());
                                else
                                    resultado.setDecimal(0/Dop.getEntero());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("entero");
                                if(Iop.getBooleano() == true)
                                    resultado.setEntero((int)Math.pow(1, Dop.getEntero()));
                                else
                                    resultado.setEntero((int)Math.pow(0, Dop.getEntero()));
                                return resultado;
                        }
                    case "decimal": //booleano op decimal
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("decimal");
                                if(Iop.getBooleano() == true)
                                    resultado.setDecimal(1+Dop.getDecimal());
                                else
                                    resultado.setDecimal(0+Dop.getDecimal());
                                return resultado;
                            case "-":
                                resultado = new TipoDato("decimal");
                                if(Iop.getBooleano() == true)
                                    resultado.setDecimal(1-Dop.getDecimal());
                                else
                                    resultado.setDecimal(0-Dop.getDecimal());
                                return resultado;
                            case "*":
                                resultado = new TipoDato("decimal");
                                if(Iop.getBooleano() == true)
                                    resultado.setDecimal(1*Dop.getDecimal());
                                else
                                    resultado.setDecimal(0*Dop.getDecimal());
                                return resultado;
                            case "/":
                                resultado = new TipoDato("decimal");
                                if(Iop.getBooleano() == true)
                                    resultado.setDecimal(1/Dop.getDecimal());
                                else
                                    resultado.setDecimal(0/Dop.getDecimal());
                                return resultado;
                            case "^":
                                resultado = new TipoDato("decimal");
                                if(Iop.getBooleano() == true)
                                    resultado.setDecimal((int)Math.pow(1, Dop.getDecimal()));
                                else
                                    resultado.setDecimal((int)Math.pow(0, Dop.getDecimal()));
                                return resultado;
                        }
                    case "tstring": //booleano op tstring
                        return null;
                    case "tchar": //booleano op tchar
                        return null;
                    case "booleano": //booleano op boleano
                        switch(op)
                        {
                            case "+":
                                resultado = new TipoDato("booleano");
                                if(Iop.getBooleano() == false && Dop.getBooleano() == false)
                                    resultado.setBooleano(false);
                                else
                                    resultado.setBooleano(true);
                                return resultado;
                            case "-":
                                return null;
                            case "*":
                                resultado = new TipoDato("booleano");
                                if(Iop.getBooleano() == true || Dop.getBooleano() == true)
                                    resultado.setBooleano(true);
                                else
                                    resultado.setBooleano(false);
                                return resultado;
                            case "/":
                                return null;
                            case "^":
                                return null;
                        }
                }
        }
        
        
        return null;
    }
            
    public void graficar(Nodo raiz){
        FileWriter archivo = null;
        PrintWriter pw = null;
        String cadena = graficarNodo(raiz);
        
        try{
            archivo = new FileWriter("arbol.dot");
            pw = new PrintWriter(archivo);
            pw.println("digraph G {node[shape=box, style=filled, color=blanchedalmond]; edge[color=chocolate3];rankdir=UD \n");
            pw.println(cadena);
            pw.println("\n}");
            archivo.close();
        }catch (Exception e) {
            System.out.println(e +" 1");
        }
        
        try {
            String cmd = "dot -Tpng arbol.dot -o arbol.png";
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            System.out.println(ioe +" 2");
        }
        
    }
    
    public String graficarNodo(Nodo nodo){
        String cadena = "";
        for(Nodo hijos : nodo.getHijos())
        {
            cadena += "\"" + nodo.getNumNodo() + "_" + nodo.getNombre() + " -> " + nodo.getValor() + "\"->\"" + hijos.getNumNodo() + "_" + hijos.getNombre() + " -> " + hijos.getValor() + "\"\n";
            cadena += graficarNodo(hijos);
        }
        return cadena;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
